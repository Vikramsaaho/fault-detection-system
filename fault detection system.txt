import numpy as np
import matplotlib.pyplot as plt
import os
import cv2
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout
from tensorflow.keras.optimizers import Adam
# Set the folder path 
folder = "/kaggle/input/caltech101/101_ObjectCategories"
def load_images_from_folder(folder, target_size=(128, 128)):
    images = []
    labels = []
    selected_classes = {
        "non-faulty": "airplanes",  # Using the "airplanes" class as an example for non-faulty products
        "faulty": "Faces_easy"      # Using the "Faces_easy" class as an example for faulty products
    }
    
    for label, class_name in selected_classes.items():
        class_folder = os.path.join(folder, class_name)
        for filename in os.listdir(class_folder):
            img = cv2.imread(os.path.join(class_folder, filename))
            if img is not None:
                img_resized = cv2.resize(img, target_size)
                img_normalized = img_resized.astype("float32") / 255.0
                images.append(img_normalized)
                labels.append(label)
    return images, labels
images, labels = load_images_from_folder(folder)
images = np.array(images) / 255.0

if len(labels) == 0:
    print("No data found. Please check the dataset path.")
else:
    label_encoder = LabelEncoder()
    integer_encoded = label_encoder.fit_transform(labels)
    num_classes = np.max(integer_encoded) + 1 if integer_encoded.size > 0 else 0
    labels = to_categorical(integer_encoded, num_classes=num_classes)
# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(images, labels, test_size=0.2, random_state=42)
# Define the CNN model
def create_cnn(input_shape, num_classes):
    model = Sequential()
    model.add(Conv2D(32, (3, 3), activation='relu', input_shape=input_shape))
    model.add(MaxPooling2D((2, 2)))
    model.add(Conv2D(64, (3, 3), activation='relu'))
    model.add(MaxPooling2D((2, 2)))
    model.add(Conv2D(128, (3, 3), activation='relu'))
    model.add(MaxPooling2D((2, 2)))
    model.add(Flatten())
    model.add(Dropout(0.5))
    model.add(Dense(256, activation='relu'))
 model.add(Dense(num_classes, activation='softmax'))
    return model

input_shape = X_train.shape[1:]
num_classes = y_train.shape[1]
model = create_cnn(input_shape, num_classes)
optimizer = Adam(learning_rate=0.001)
model.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])
history = model.fit(X_train, y_train, batch_size=32, epochs=20, validation_split=0.2)
test_loss, test_accuracy = model.evaluate(X_test, y_test)
print(f"Test loss: {test_loss}, Test accuracy: {test_accuracy}")
def load_and_preprocess_image(image_path, target_size=(128, 128)):
    img = cv2.imread(image_path)
    if img is not None:
        img_resized = cv2.resize(img, target_size)
        img_normalized = img_resized.astype("float32") / 255.0
        return img_normalized
    return None
test_image_path = "/kaggle/input/caltech101/101_ObjectCategories/Faces_easy/image_0055.jpg"
test_image = load_and_preprocess_image(test_image_path)
test_image_batch = np.expand_dims(test_image, axis=0)

# Make a prediction
predictions = model.predict(test_image_batch)

# Get the class with the highest probability
predicted_class = np.argmax(predictions[0])

# Decode the predicted class back to its label
predicted_label = label_encoder.inverse_transform([predicted_class])[0]

print(f"Predicted label: {predicted_label}")
test_image_path = "/kaggle/input/caltech101/101_ObjectCategories/airplanes/image_0020.jpg"
test_image = load_and_preprocess_image(test_image_path)
# Add a batch dimension to the image (the model expects a batch of images as input)
test_image_batch = np.expand_dims(test_image, axis=0)

# Make a prediction
predictions = model.predict(test_image_batch)

# Get the class with the highest probability
predicted_class = np.argmax(predictions[0])

# Decode the predicted class back to its label
predicted_label = label_encoder.inverse_transform([predicted_class])[0]

print(f"Predicted label: {predicted_label}")

